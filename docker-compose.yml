services:
  db:
    image: postgis/postgis:16-3.4
    restart: unless-stopped
    env_file:
      - .env
    ports:
      - "5432:5432"
    healthcheck:
      test: [ "CMD-SHELL", "sh -c 'pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}'" ]
      interval: 5s
      timeout: 5s
      retries: 5
    volumes:
      - db-data:/var/lib/postgresql/data
      - ./preseed:/tmp

  app:
    build:
      context: .
      dockerfile: Dockerfile
    init: true
    env_file:
      - .env
    environment:
      DATABASE_URL: postgres://${POSTGRES_USER}:${POSTGRES_PASSWORD}@db:5432/${POSTGRES_DB}
    ports:
      - "3000:3000"
    depends_on:
      db:
        condition: service_healthy
    volumes:
      - uploads:/usr/src/app/uploads

  app-rust:
    build:
      context: ./backend/rust
      dockerfile: Dockerfile
    init: true
    env_file:
      - .env
    environment:
      DATABASE_URL: postgres://${POSTGRES_USER}:${POSTGRES_PASSWORD}@db:5432/${POSTGRES_DB}
    ports:
      - "4000:4000"
    depends_on:
      db:
        condition: service_healthy
#    volumes:
#      - uploads:/usr/src/app/uploads

  caddy:
    image: caddy:latest
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./Caddyfile:/etc/caddy/Caddyfile:ro
      - caddy-data:/data
      - caddy-config:/config
    depends_on:
      app:
        condition: service_started

  test:
    profiles: ["cli-only"]
    build:
      context: .
      dockerfile: tests/Dockerfile
    env_file:
      - .env
    depends_on:
      app:
        condition: service_started

volumes:
  db-data:
  uploads:
  caddy-data:
  caddy-config:
